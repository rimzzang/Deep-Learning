{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EPUuuKLxB1E5",
        "outputId": "589ac6c9-04da-4687-ef34-26dd2aec328b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting torchinfo\n",
            "  Downloading torchinfo-1.8.0-py3-none-any.whl.metadata (21 kB)\n",
            "Collecting boston\n",
            "  Downloading boston-1.0.17-py3-none-any.whl.metadata (463 bytes)\n",
            "Collecting JAEN\n",
            "  Downloading JAEN-0.0.11-py3-none-any.whl.metadata (334 bytes)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from boston) (2.1.4)\n",
            "Requirement already satisfied: numpy<2,>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas->boston) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas->boston) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->boston) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->boston) (2024.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas->boston) (1.16.0)\n",
            "Downloading torchinfo-1.8.0-py3-none-any.whl (23 kB)\n",
            "Downloading boston-1.0.17-py3-none-any.whl (27 kB)\n",
            "Downloading JAEN-0.0.11-py3-none-any.whl (25.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m25.8/25.8 MB\u001b[0m \u001b[31m13.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: torchinfo, JAEN, boston\n",
            "Successfully installed JAEN-0.0.11 boston-1.0.17 torchinfo-1.8.0\n"
          ]
        }
      ],
      "source": [
        "!pip install torchinfo boston JAEN"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Python Overview"
      ],
      "metadata": {
        "id": "W8lk7OV5i-B8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x = 5 # 정수형 변수\n",
        "name = 'Alice' # 문자열형 변수\n",
        "pi = 3.14 # 실수형 변수\n",
        "is_active = True # 불리언형 변수\n",
        "x, name, pi, is_active"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sQ9-tVTPi8pu",
        "outputId": "d24a7701-31f1-4b47-9e20-40c492655310"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5, 'Alice', 3.14, True)"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 리스트의 각 요소를 출력\n",
        "fruits = ['apple', 'banana', 'cherry']\n",
        "\n",
        "for fruit in fruits:\n",
        "    print(fruit)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sAu4mCbNjRQf",
        "outputId": "0117c845-ca12-46b4-87eb-66cbbe0bec74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "apple\n",
            "banana\n",
            "cherry\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 0부터 4까지의 숫자를 출력\n",
        "for i in range(5):\n",
        "    print(i)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IRRfKeh9jZ8o",
        "outputId": "ee3668b4-ffa7-4b8e-db8b-0931fcd91442"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "1\n",
            "2\n",
            "3\n",
            "4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 함수 정의\n",
        "def greet(name):\n",
        "    return f'Hello {name}!'\n",
        "\n",
        "# 함수 호출\n",
        "message = greet('Alice')\n",
        "print(message)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UVE3OcrYjeGw",
        "outputId": "b0ca9524-5ff0-4adc-a35c-8f55dff1b466"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Alice!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 위치 인자\n",
        "def add(a, b):\n",
        "    return a + b\n",
        "\n",
        "result = add(3, 5)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JTBPjnAJkc8-",
        "outputId": "5a3c642f-02bd-4cdc-a28f-408fcaa905f9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 키워드 인자\n",
        "def introduce(name, age):\n",
        "    return f'My name is {name} and I am {age} years old'\n",
        "\n",
        "message = introduce(age=30, name='Alice')\n",
        "print(message)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mg22YnNMkirG",
        "outputId": "9c7e22f8-8389-4f03-8843-b7909e70ed15"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "My name is Alice and I am 30 years old\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 기본 인자\n",
        "def greet(name='Guest'):\n",
        "    return f'Hello {name}!'\n",
        "\n",
        "message = greet()\n",
        "print(message)\n",
        "\n",
        "message = greet('Alice')\n",
        "print(message)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hj5vzqIekzK-",
        "outputId": "65f5182e-be32-4223-e7f0-6e6120835e68"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Guest!\n",
            "Hello Alice!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 가변 길이 위치 인자\n",
        "def mysum(*args):\n",
        "    print(args)\n",
        "    ret = 0\n",
        "    for i in args:\n",
        "        ret += i\n",
        "    return ret\n",
        "result = mysum(1,2,3,4,5)\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hOTzZmezk77x",
        "outputId": "8430ccdc-b0a0-4bde-95c5-1216e873d28c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1, 2, 3, 4, 5)\n",
            "15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 가변 길이 키워드 인자\n",
        "def printinfo(**kwargs):\n",
        "    print(kwargs)\n",
        "    for key, value in kwargs.items():\n",
        "        print(f'{key}: {value}')\n",
        "printinfo(name='Alice', age=30, city='New York')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Di38-9Z8lk_2",
        "outputId": "15205938-ce75-4bad-f5d7-5ddb8730c88d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'name': 'Alice', 'age': 30, 'city': 'New York'}\n",
            "name: Alice\n",
            "age: 30\n",
            "city: New York\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# global 키워드\n",
        "def my_function():\n",
        "    print(global_var)\n",
        "\n",
        "global_var = 'I am global'\n",
        "my_function()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KMaUXhk3l73t",
        "outputId": "45c7c4e0-ad67-43f0-b86e-ee859881a4fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I am global\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# global 키워드\n",
        "def my_function():\n",
        "    global_var = 'I am local'\n",
        "    print(global_var)\n",
        "\n",
        "global_var = 'I am global'\n",
        "my_function()\n",
        "print(global_var)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VzQAVGwSpJi0",
        "outputId": "6f950f95-9739-494f-f6bc-a476469994b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I am local\n",
            "I am global\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# global 키워드\n",
        "def my_function():\n",
        "    global global_var\n",
        "    global_var = 'I am local'\n",
        "    print(global_var)\n",
        "\n",
        "global_var = 'I am global'\n",
        "my_function()\n",
        "print(global_var)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u9eEZmLnsAxL",
        "outputId": "e87f6e28-f3be-4e88-dee7-62c4d6869fe2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "I am local\n",
            "I am local\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tempfile import gettempprefix\n",
        "# 클래스\n",
        "class TV:\n",
        "    def __init__(self, brand, size):\n",
        "        self.brand = brand # 인스턴스 속성\n",
        "        self.size = size\n",
        "        self.__is_on = False\n",
        "\n",
        "    def turn_on(self):\n",
        "        state = '이미 켜져 있습니다' if self.__is_on else '켜졌습니다.'\n",
        "        print(f'{self.brand} {self.size}인치 TV가 {state}')\n",
        "        self.__is_on = True\n",
        "\n",
        "    def turn_off(self):\n",
        "        state = '꺼졌습니다.' if self.__is_on else '이미 꺼져 있습니다.'\n",
        "        print(f'{self.brand} {self.size}인치 TV가 {state}')\n",
        "        self.__is_on = False\n",
        "\n",
        "    def change_channel(self, channel):\n",
        "        msg1 = f'의 채널을 {channel}번으로 변경합니다.'\n",
        "        msg2 = '가 꺼져 있어 채널을 변경할 수 없습니다.'\n",
        "        state =  msg1 if self.__is_on else msg2\n",
        "        print(f'{self.brand} {self.size}인치 TV{state}')"
      ],
      "metadata": {
        "id": "qxz_D8LUsN2i"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tv = TV('Samsung', 55)\n",
        "tv.turn_on()\n",
        "tv.turn_on()\n",
        "tv.turn_off()\n",
        "tv.turn_off()\n",
        "tv.turn_on()\n",
        "tv.change_channel(10)\n",
        "tv.turn_off()\n",
        "tv.change_channel(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nk0iPPQDxi-5",
        "outputId": "0b8a350b-7050-4015-b639-7edfee780501"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Samsung 55인치 TV가 켜졌습니다.\n",
            "Samsung 55인치 TV가 이미 켜져 있습니다\n",
            "Samsung 55인치 TV가 꺼졌습니다.\n",
            "Samsung 55인치 TV가 이미 꺼져 있습니다.\n",
            "Samsung 55인치 TV가 켜졌습니다.\n",
            "Samsung 55인치 TV의 채널을 10번으로 변경합니다.\n",
            "Samsung 55인치 TV가 꺼졌습니다.\n",
            "Samsung 55인치 TV가 꺼져 있어 채널을 변경할 수 없습니다.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 모듈\n",
        "%%writefile my_module.py\n",
        "def greet(name):\n",
        "    return f'Hello {name}!'\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    print(greet('앨리스'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ctFEhi16x60L",
        "outputId": "09e30847-e7ba-4042-ec2a-39fa72532646"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing my_module.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import my_module\n",
        "\n",
        "print(my_module.greet('Alice'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1FShdPKLykYQ",
        "outputId": "e9717afb-4ffb-447b-eb9e-5e1208f5c7c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello Alice!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!python my_module.py"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MGvJDCbuyovI",
        "outputId": "aca0807e-84aa-4657-afc1-fb1aad5a4009"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello 앨리스!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 패키지\n",
        "import os\n",
        "\n",
        "os.makedirs('./mypackage/subpackage/')"
      ],
      "metadata": {
        "id": "rXyct3VoztNQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 패키지\n",
        "%%writefile ./mypackage/__init__.py\n",
        "'''\n",
        "    mypackage\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3dVfLq2R2pkP",
        "outputId": "6501c018-d658-49e4-f92f-369c3c2c7dfb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing ./mypackage/__init__.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 패키지\n",
        "%%writefile ./mypackage/subpackage/__init__.py\n",
        "'''\n",
        "    subpackage\n",
        "'''"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wsCOCvgm2yBV",
        "outputId": "ad1d827f-d265-4e8d-dd58-9448a35ea2fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing ./mypackage/subpackage/__init__.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 패키지\n",
        "%%writefile ./mypackage/module1.py\n",
        "def greet():\n",
        "    return f'Hello from {__name__}!'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DkCxryMl2Uq2",
        "outputId": "7168268b-a6ea-43f9-9c83-5599edf1bb97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing ./mypackage/module1.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 패키지\n",
        "%%writefile ./mypackage/module2.py\n",
        "def greet():\n",
        "    return f'Hello from {__name__}!'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Gd_sviD2hBF",
        "outputId": "cf21eb8c-1ec3-4a3f-f838-80e730288761"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing ./mypackage/module2.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 패키지\n",
        "%%writefile ./mypackage/subpackage/module3.py\n",
        "def greet():\n",
        "    return f'Hello from {__name__}!'"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3A10x1kv2kQc",
        "outputId": "05eb5e2f-5117-4ef4-c2ae-68e6b64001a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Writing ./mypackage/subpackage/module3.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import mypackage.module1\n",
        "\n",
        "print(mypackage.module1.greet())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u3ljGjbd23RU",
        "outputId": "4cde00c2-866f-4314-a758-a3148eff1857"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello from mypackage.module1!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from mypackage import module1\n",
        "\n",
        "print(module1.greet())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WkMxTj483IFX",
        "outputId": "37e02b84-71cf-4dc2-c871-afc9ae23e82d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello from mypackage.module1!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from mypackage.module1 import greet\n",
        "\n",
        "print(greet())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tbnVqA8z3MQO",
        "outputId": "de8502e0-87d8-42c9-e508-b19fe8c5ffad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello from mypackage.module1!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import mypackage.subpackage.module3\n",
        "\n",
        "print(mypackage.subpackage.module3.greet())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xORQO-Zf3ULQ",
        "outputId": "8e8eb6a7-e197-44d6-e032-6e88ea8f1a35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello from mypackage.subpackage.module3!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from mypackage import subpackage\n",
        "\n",
        "print(subpackage.module3.greet())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j6iJwGpI3bYO",
        "outputId": "577f9a5f-2583-485f-8a41-86edd4d6e78a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hello from mypackage.subpackage.module3!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pA183l17GBYl"
      },
      "source": [
        "# PyTorch Basic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JNCGr1FgEpi7"
      },
      "outputs": [],
      "source": [
        "import torch  # PyTorch 라이브러리 임포트\n",
        "import numpy as np  # NumPy 라이브러리 임포트"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oyxmf2qXEpk-",
        "outputId": "2eea080c-61f1-4ab9-949f-28e3198a4aec"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([2., 4., 6.])\n"
          ]
        }
      ],
      "source": [
        "# 1D 텐서 생성\n",
        "tensor_1d = torch.tensor([1.0, 2.0, 3.0])\n",
        "\n",
        "# 2D 텐서 생성\n",
        "tensor_2d = torch.tensor([[1.0, 2.0],\n",
        "                          [3.0, 4.0]])\n",
        "\n",
        "# # 텐서를 GPU로 이동\n",
        "# if torch.cuda.is_available():  # GPU 사용 가능 여부 확인\n",
        "#     tensor_1d = tensor_1d.to('cuda')  # 1D 텐서 GPU로 이동\n",
        "#     tensor_2d = tensor_2d.to('cuda')  # 2D 텐서 GPU로 이동\n",
        "\n",
        "print(tensor_1d + tensor_1d) # 텐서 출력(요소별 덧셈)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PCGTgE3uEpnl",
        "outputId": "7f63ffb6-a63c-4842-e409-8a42376fad3d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([1., 2., 3.], dtype=torch.float64)\n"
          ]
        }
      ],
      "source": [
        "numpy_array = np.array([1, 2, 3])  # NumPy 배열 생성\n",
        "tensor_from_numpy = torch.tensor(numpy_array, dtype=torch.float64)  # NumPy 배열로부터 텐서 생성\n",
        "print(tensor_from_numpy) # 텐서 출력"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UWfaj8wgEpqM",
        "outputId": "c2be611b-2eb7-4d85-de8e-d322d35ad26a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0., 0., 0.],\n",
            "        [0., 0., 0.],\n",
            "        [0., 0., 0.]])\n"
          ]
        }
      ],
      "source": [
        "# 3x3 모든 요소가 0인 Tensor 생성\n",
        "zeros_tensor = torch.zeros((3, 3))\n",
        "print(zeros_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P4Sy27oaEpsz",
        "outputId": "9595da0c-7944-414d-b43a-0c174b9afc20"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[1., 1.],\n",
            "        [1., 1.]])\n"
          ]
        }
      ],
      "source": [
        "# 2x2 모든 요소가 1인 Tensor 생성\n",
        "ones_tensor = torch.ones((2, 2))\n",
        "print(ones_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H7dqXhHpEpva",
        "outputId": "be73c6b5-6834-4e30-f9a6-30de3f2b7b48"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[7, 7, 7, 7],\n",
            "        [7, 7, 7, 7],\n",
            "        [7, 7, 7, 7],\n",
            "        [7, 7, 7, 7]])\n"
          ]
        }
      ],
      "source": [
        "# 모든 요소가 7로 채워진 4x4 Tensor 생성\n",
        "full_tensor = torch.full((4, 4), 7)\n",
        "print(full_tensor)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2RCfBzMJEpyA",
        "outputId": "cbc2fa41-3143-444d-f535-7aa46fc6b064"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([0, 2, 4, 6, 8])\n"
          ]
        }
      ],
      "source": [
        "# 0부터 10까지 2씩 증가하는 값들로 구성된 1D Tensor 생성\n",
        "arange_tensor = torch.arange(0, 10, 2)\n",
        "print(arange_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Je6CaMcAEp0o",
        "outputId": "c10d3957-2f59-4cda-8a16-7ab97a6fbe0f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([0.0000, 0.2500, 0.5000, 0.7500, 1.0000])\n"
          ]
        }
      ],
      "source": [
        "# 0부터 1까지 5개의 균일한 간격을 가진 값들로 구성된 1D Tensor 생성\n",
        "linspace_tensor = torch.linspace(0, 1, 5)\n",
        "print(linspace_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "thpBSYlWEp3f",
        "outputId": "b50389a3-d5d9-4e79-c1e8-31033b643251"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[1., 0., 0.],\n",
            "        [0., 1., 0.],\n",
            "        [0., 0., 1.]])\n"
          ]
        }
      ],
      "source": [
        "# 3x3 단위 행렬 생성\n",
        "eye_tensor = torch.eye(3)\n",
        "print(eye_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mlLhG_5iEp6F",
        "outputId": "1f8dc4b4-ec1f-494d-d7cd-44106827611a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0.6008, 0.6530, 0.4134],\n",
            "        [0.1395, 0.5174, 0.5254]])\n"
          ]
        }
      ],
      "source": [
        "# 2x3의 [0, 1) 범위에서 균일하게 분포된 난수로 초기화된 Tensor 생성\n",
        "rand_tensor = torch.rand((2, 3))\n",
        "print(rand_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JBFVXw2wEp8a",
        "outputId": "955dd6ee-da7d-4729-eb46-e725345ebd20"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[-1.6530,  1.6257],\n",
            "        [-1.4006, -0.7111]])\n"
          ]
        }
      ],
      "source": [
        "# 2x2의 표준 정규 분포를 따르는 난수로 초기화된 Tensor 생성\n",
        "randn_tensor = torch.randn((2, 2))\n",
        "print(randn_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Is_apGYaEp_C",
        "outputId": "46f2eee2-68a5-4120-eadf-6a5fbda155c0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[4, 1],\n",
            "        [1, 1]])\n"
          ]
        }
      ],
      "source": [
        "# 0부터 10까지의 범위에서 4개의 정수 난수로 초기화된 2x2 Tensor 생성\n",
        "randint_tensor = torch.randint(0, 10, (2, 2))\n",
        "print(randint_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kXG48ZcFE0eN",
        "outputId": "ceccf247-dd88-4216-ed63-f602cc6b2a0d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([8, 9, 3, 5, 1, 4, 7, 6, 2, 0])\n"
          ]
        }
      ],
      "source": [
        "# 0부터 9까지의 숫자를 랜덤하게 섞은 1D Tensor 생성\n",
        "randperm_tensor = torch.randperm(10)\n",
        "print(randperm_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pDvZViJQE0gu",
        "outputId": "6b0792dc-18e0-41d5-ef3d-0b98c86c3b6f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0., 0.],\n",
            "        [0., 0.]])\n"
          ]
        }
      ],
      "source": [
        "# 2x2 텐서 생성, 데이터 타입을 float32로 지정\n",
        "tensor_with_dtype = torch.zeros((2, 2), dtype=torch.float32)\n",
        "print(tensor_with_dtype)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "678U7Z8nE0jW",
        "outputId": "230f4700-9133-4889-a544-226eddf8290e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0., 0.],\n",
            "        [0., 0.]])\n"
          ]
        }
      ],
      "source": [
        "# 2x2 텐서 생성, GPU에서 사용하도록 장치를 지정 (CUDA가 가능한 경우)\n",
        "tensor_on_gpu = torch.zeros((2, 2), device='cuda' if torch.cuda.is_available() else 'cpu')\n",
        "print(tensor_on_gpu)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mm5z3ynOE0l7",
        "outputId": "aa972248-18f2-462b-f17c-e71df380ded7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[1., 1.],\n",
            "        [1., 1.]], requires_grad=True)\n"
          ]
        }
      ],
      "source": [
        "# 2x2 텐서 생성, 미분이 가능하도록 지정\n",
        "tensor_requires_grad = torch.ones((2, 2), requires_grad=True)\n",
        "print(tensor_requires_grad)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "StZ56MdXE0oi",
        "outputId": "e956cafb-4292-4eaf-9ff3-87520ddbffcd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0, 0],\n",
            "        [0, 0]])\n"
          ]
        }
      ],
      "source": [
        "input_tensor = torch.tensor([[1, 2], [3, 4]])\n",
        "zeros_like_tensor = torch.zeros_like(input_tensor)\n",
        "print(zeros_like_tensor)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# shape 변경 view\n",
        "x = torch.randn(2, 3)\n",
        "print(x.shape)\n",
        "\n",
        "y = x.view(6)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I8K6RwGSfHB5",
        "outputId": "e2c57bc9-9aa7-467c-de4c-95d1115d7271"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([2, 3])\n",
            "torch.Size([6])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_t = x.t()\n",
        "y = x_t.view(6)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        },
        "id": "Lbpyc99Mfe_S",
        "outputId": "711af61d-bab1-41fe-979e-09a83f082ba1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead.",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-224ff9f601ab>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx_t\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_t\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mview\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m: view size is not compatible with input tensor's size and stride (at least one dimension spans across two contiguous subspaces). Use .reshape(...) instead."
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_t = x.t()\n",
        "y = x_t.contiguous().view(6)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2RDi8RrZfmFS",
        "outputId": "bcdc6434-9baf-4c93-d3b8-8828527d2c57"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([6])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# shape 변경 reshape\n",
        "y = x_t.reshape(6)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ATKpcTIKfrGw",
        "outputId": "a61a090b-ba2a-46bd-fc96-77135f1575a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([6])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 전치 transpose\n",
        "x = torch.randn(2, 3)\n",
        "y = x.transpose(0, 1)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HZ8371tPfwER",
        "outputId": "7c03d759-233a-4869-b40c-55ec043158d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([3, 2])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 전치 permute\n",
        "x = torch.randn(10, 28, 28, 3)\n",
        "y = x.permute(0, 3, 1, 2)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pT1sN8MHf1hS",
        "outputId": "3cd1179d-1c82-4765-f795-585b3ed09112"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([10, 3, 28, 28])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# squeeze\n",
        "x = torch.randn(1, 3, 1, 5)\n",
        "y = x.squeeze()\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I2ZPuN47f7O4",
        "outputId": "3d2f0a38-cd08-4d85-89e7-e3eea78f72a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([3, 5])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# unsqueeze\n",
        "x = torch.randn(3, 5)\n",
        "y = x.unsqueeze(0)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "beBulJF9gCW4",
        "outputId": "6e46a295-a2a3-4ca7-9b69-3c59f3ae9901"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([1, 3, 5])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# flatten\n",
        "x = torch.randn(2,3,4)\n",
        "y = x.flatten(1)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nuUY5lhMgHrZ",
        "outputId": "8724dacd-c203-4531-850b-1c589f01ef54"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "torch.Size([2, 12])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jO0ThLFnE0rZ",
        "outputId": "b003bf31-95fd-4847-b9d4-fa02038bdf1b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(10)\n"
          ]
        }
      ],
      "source": [
        "# 1D 텐서 생성\n",
        "tensor_1d = torch.tensor([10, 20, 30, 40])\n",
        "\n",
        "# 첫 번째 요소 선택 (Python 인덱스는 0부터 시작)\n",
        "print(tensor_1d[0])  # 출력: tensor(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Feu6dnAYE0uR",
        "outputId": "d4cb4345-f63c-42d6-c53c-a5fc33f862ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(40)\n"
          ]
        }
      ],
      "source": [
        "# 마지막 요소 선택\n",
        "print(tensor_1d[-1])  # 출력: tensor(40)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l3Iyc3qOE0wo",
        "outputId": "da9d5d0c-88c5-442b-87ee-4b02ba614bac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(2)\n"
          ]
        }
      ],
      "source": [
        "# 2D 텐서 생성\n",
        "tensor_2d = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "\n",
        "# 첫 번째 행, 두 번째 열 요소 선택\n",
        "print(tensor_2d[0, 1])  # 출력: tensor(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nb5IWTy2E0zN",
        "outputId": "bb2f2dc1-08b2-48a9-80b1-57e39e1a6cf9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(9)\n"
          ]
        }
      ],
      "source": [
        "# 마지막 행, 마지막 열 요소 선택\n",
        "print(tensor_2d[-1, -1])  # 출력: tensor(9)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aXOGxTdVE_sF",
        "outputId": "cc062f5a-8bd3-49c7-f9cf-0352e1eb26c1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([20, 30, 40])\n"
          ]
        }
      ],
      "source": [
        "# 1D 텐서 슬라이싱\n",
        "tensor_1d = torch.tensor([10, 20, 30, 40, 50])\n",
        "\n",
        "# 인덱스 1부터 3까지의 요소 선택 (끝 인덱스는 포함되지 않음)\n",
        "print(tensor_1d[1:4])  # 출력: tensor([20, 30, 40])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "06OP6B5hE_us",
        "outputId": "529933d0-f79a-4a92-b0d5-c646feabe23d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([10, 20, 30, 40])\n"
          ]
        }
      ],
      "source": [
        "# 처음부터 인덱스 3까지의 요소 선택\n",
        "print(tensor_1d[:4])  # 출력: tensor([10, 20, 30, 40])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gs8lG-ntE_xC",
        "outputId": "15aed186-7eff-4fdb-b9a7-680bb13ba332"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([30, 40, 50])\n"
          ]
        }
      ],
      "source": [
        "# 인덱스 2부터 끝까지의 요소 선택\n",
        "print(tensor_1d[2:])  # 출력: tensor([30, 40, 50])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nY8KzA7oE_zp",
        "outputId": "65a60d14-ac51-4ab8-f32a-bb701581210e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([1, 2, 3])\n"
          ]
        }
      ],
      "source": [
        "# 2D 텐서 슬라이싱\n",
        "tensor_2d = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "\n",
        "# 첫 번째 행 선택\n",
        "print(tensor_2d[0, :])  # 출력: tensor([1, 2, 3])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A3EKrMRYE_2Q",
        "outputId": "44f0f945-02f3-40d2-8f42-3b7f7e2b06e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([1, 4, 7])\n"
          ]
        }
      ],
      "source": [
        "# 첫 번째 열 선택\n",
        "print(tensor_2d[:, 0])  # 출력: tensor([1, 4, 7])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5U8lmjqQE_4l",
        "outputId": "b289b760-730d-4797-9ed0-e296667caef7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[1, 2, 3],\n",
            "        [4, 5, 6]])\n"
          ]
        }
      ],
      "source": [
        "# 첫 번째와 두 번째 행 선택\n",
        "print(tensor_2d[:2, :])  # 출력: tensor([[1, 2, 3], [4, 5, 6]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jAkZDoWOFFNx",
        "outputId": "f5a6cb4e-ac50-4a28-89bb-e480396c5967"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([40, 50])\n"
          ]
        }
      ],
      "source": [
        "# 1D 텐서 생성\n",
        "tensor = torch.tensor([10, 20, 30, 40, 50])\n",
        "\n",
        "# 30보다 큰 요소만 선택\n",
        "print(tensor[tensor > 30])  # 출력: tensor([40, 50])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dOQ5IIdHFFP0",
        "outputId": "5ebfbf96-c804-4f2b-8e2c-72de2b33e545"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([10, 20, 30, 40, 50])\n"
          ]
        }
      ],
      "source": [
        "# 짝수인 요소만 선택\n",
        "print(tensor[tensor % 2 == 0])  # 출력: tensor([10, 20, 30, 40, 50])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Do9aZRHNFFR6",
        "outputId": "16b151d7-fca0-4918-ae5c-153d25738dda"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([6, 7, 8, 9])\n"
          ]
        }
      ],
      "source": [
        "# 2D 텐서 생성\n",
        "tensor_2d = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "\n",
        "# 5보다 큰 요소만 선택\n",
        "print(tensor_2d[tensor_2d > 5])  # 출력: tensor([6, 7, 8, 9])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U-8BgEAJFFUQ",
        "outputId": "690fdda4-0056-4e0e-c317-a1d2a0477997"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([10, 30, 50])\n"
          ]
        }
      ],
      "source": [
        "# 1D 텐서 생성\n",
        "tensor = torch.tensor([10, 20, 30, 40, 50])\n",
        "\n",
        "# 인덱스 0, 2, 4 위치의 요소 선택\n",
        "print(tensor[[0, 2, 4]])  # 출력: tensor([10, 30, 50])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "e8zFZwQqE010",
        "outputId": "1d22da83-283b-43aa-f288-03f1785a3e52"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[1, 2, 3],\n",
            "        [7, 8, 9]])\n"
          ]
        }
      ],
      "source": [
        "# 2D 텐서 생성\n",
        "tensor_2d = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "\n",
        "# 첫 번째와 세 번째 행 선택\n",
        "print(tensor_2d[[0, 2]])  # 출력: tensor([[1, 2, 3], [7, 8, 9]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gaIiKGyBFJaA",
        "outputId": "b7cb2ba2-0199-4533-a1af-b09550feebdb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([2, 9])\n"
          ]
        }
      ],
      "source": [
        "# (0, 1)과 (2, 2) 위치의 요소 선택\n",
        "print(tensor_2d[[0, 2], [1, 2]])  # 출력: tensor([2, 9])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9-HQMhglFJcT",
        "outputId": "2a6e1631-f632-487d-e214-88aaba745c88"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([100,  20,  30,  40,  50])\n"
          ]
        }
      ],
      "source": [
        "# 1D 텐서 생성\n",
        "tensor = torch.tensor([10, 20, 30, 40, 50])\n",
        "\n",
        "# 인덱스 0 위치의 요소 수정\n",
        "tensor[0] = 100\n",
        "print(tensor)  # 출력: tensor([100,  20,  30,  40,  50])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gW7FOUwOFJe8",
        "outputId": "fedfa6f5-d6f1-48cf-b781-651721c03c88"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([100, 200, 300, 400,  50])\n"
          ]
        }
      ],
      "source": [
        "# 인덱스 1부터 3까지의 요소 수정\n",
        "tensor[1:4] = torch.tensor([200, 300, 400])\n",
        "print(tensor)  # 출력: tensor([100, 200, 300, 400,  50])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K-UDevs2FJhQ",
        "outputId": "43e29f8b-67dc-4896-9507-09d9b507e813"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0, 0, 0],\n",
            "        [4, 5, 6],\n",
            "        [7, 8, 9]])\n"
          ]
        }
      ],
      "source": [
        "# 2D 텐서 생성\n",
        "tensor_2d = torch.tensor([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "\n",
        "# 첫 번째 행을 모두 0으로 수정\n",
        "tensor_2d[0, :] = 0\n",
        "print(tensor_2d)  # 출력: tensor([[0, 0, 0], [4, 5, 6], [7, 8, 9]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hs3HTUk8FM4I",
        "outputId": "8f485ad2-5b2e-422d-bea7-f76fce121cca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0, 1, 0],\n",
            "        [4, 1, 6],\n",
            "        [7, 1, 9]])\n"
          ]
        }
      ],
      "source": [
        "# 두 번째 열을 모두 1로 수정\n",
        "tensor_2d[:, 1] = 1\n",
        "print(tensor_2d)  # 출력: tensor([[0, 1, 0], [4, 1, 6], [7, 1, 9]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "roZRJu7cFM6L",
        "outputId": "3a9fd3b1-e85e-4f4e-8812-d56724475765"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([5, 7, 9])\n"
          ]
        }
      ],
      "source": [
        "# Tensor 생성\n",
        "x = torch.tensor([1, 2, 3])\n",
        "y = torch.tensor([4, 5, 6])\n",
        "\n",
        "# 요소별 뺄셈\n",
        "add_result = x + y  # 또는 torch.add(x, y)\n",
        "print(add_result)  # 출력: tensor([5, 7, 9])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G29BqzumFM8i",
        "outputId": "30b1ce3b-4fe2-49db-9b7c-8a0e2f9ff27e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([-3, -3, -3])\n"
          ]
        }
      ],
      "source": [
        "# 요소별 뺄셈\n",
        "sub_result = x - y  # 또는 torch.subtract(x, y)\n",
        "print(sub_result)  # 출력: tensor([-3, -3, -3])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RSM3b7r-FM-5",
        "outputId": "7de3d7d0-d5ad-4f10-8fde-5c1a85fa11e4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([ 4, 10, 18])\n"
          ]
        }
      ],
      "source": [
        "# 요소별 곱셈\n",
        "mul_result = x * y  # 또는 torch.multiply(x, y)\n",
        "print(mul_result)  # 출력: tensor([4, 10, 18])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WF9u2hI5FJjm",
        "outputId": "e3415cab-60d1-4ef7-ec42-0cfd07bbd7a4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([0.2500, 0.4000, 0.5000])\n"
          ]
        }
      ],
      "source": [
        "# 요소별 나눗셈\n",
        "div_result = x / y  # 또는 torch.divide(x, y)\n",
        "print(div_result)  # 출력: tensor([0.2500, 0.4000, 0.5000])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E2T0cZ-vFRRG",
        "outputId": "33a47baa-81eb-42e4-f6db-f0f39d0eeb12"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[2, 4, 6],\n",
            "        [5, 7, 9]])\n"
          ]
        }
      ],
      "source": [
        "# Tensor 생성\n",
        "x = torch.tensor([[1, 2, 3], [4, 5, 6]])\n",
        "y = torch.tensor([1, 2, 3])\n",
        "\n",
        "# 브로드캐스팅을 통한 요소별 덧셈\n",
        "result = x + y\n",
        "print(result) # 출력: tensor([[2, 4, 6], [5, 7, 9]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gogCJhuxFRT8",
        "outputId": "d13392f8-ce8b-4cb4-9327-4adbdd2275e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[ 58,  64],\n",
            "        [139, 154]])\n"
          ]
        }
      ],
      "source": [
        "# Tensor 생성\n",
        "x = torch.tensor([[1, 2, 3], [4, 5, 6]])      #  (2x3 행렬)\n",
        "y = torch.tensor([[7, 8], [9, 10], [11, 12]]) # (3x2 행렬)\n",
        "\n",
        "# 행렬 곱셈\n",
        "matmul_result = torch.matmul(x, y) # 2행 3열 x 3행 2열 = 2행 2열\n",
        "print(matmul_result) # 출력: tensor([[ 58,  64],[139, 154]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q2RsL4rpFRWB",
        "outputId": "229490ce-7c62-44da-eff0-3891cf5d7b47"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[1, 4],\n",
            "        [2, 5],\n",
            "        [3, 6]])\n"
          ]
        }
      ],
      "source": [
        "# 전치 (행열 바꾸기)\n",
        "transpose_result = x.t()\n",
        "print(transpose_result)\n",
        "# 출력: tensor([[1, 4], [2, 5], [3, 6]])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3vHDMkElFRYb",
        "outputId": "16f03c1a-7d45-4901-fdd1-9125a4b6307f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(15)\n"
          ]
        }
      ],
      "source": [
        "# Tensor 생성\n",
        "x = torch.tensor([1, 2, 3, 4, 5])\n",
        "\n",
        "# 합계\n",
        "sum_result = torch.sum(x)\n",
        "print(sum_result)  # 출력: tensor(15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wns5E94vFJmN",
        "outputId": "351f6694-6c3b-42a9-b5a6-010ef5b68783"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(3.)\n"
          ]
        }
      ],
      "source": [
        "# 평균\n",
        "mean_result = torch.mean(x.float())  # Tensor를 float로 변환한 후 평균 계산\n",
        "print(mean_result)  # 출력: tensor(3.0000)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zOE1PWr_FVxh",
        "outputId": "22a49c82-aa83-496b-8606-c69321fc4b90"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(5)\n"
          ]
        }
      ],
      "source": [
        "# 최대값\n",
        "max_result = torch.max(x)\n",
        "print(max_result)  # 출력: tensor(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Vqf_2mURFVzk",
        "outputId": "3714670d-122b-4b13-f5d4-529dc0cf6565"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor(1)\n"
          ]
        }
      ],
      "source": [
        "# 최소값\n",
        "min_result = torch.min(x)\n",
        "print(min_result)  # 출력: tensor(1)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from torch import nn\n",
        "import torch\n",
        "label = torch.tensor([0, 1])\n",
        "preds = torch.tensor([[0.7, 0.3], [0.2, 0.8]])"
      ],
      "metadata": {
        "id": "A0XD-TT8AreP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "label_onehot = nn.functional.one_hot(label)\n",
        "label_onehot"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aGV9CBqCBkop",
        "outputId": "f1e730ec-bb5c-47b9-de66-e8ac8c51bbf5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[1, 0],\n",
              "        [0, 1]])"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "-(label_onehot * torch.log(preds)).sum(dim=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PS_KsladBwaX",
        "outputId": "a837a460-1ee1-446b-928f-74d8103bcb4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0.3567, 0.2231])"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nn.functional.binary_cross_entropy(preds[:, 1], label.float(), reduction='none')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SF9Tz9mpCNhR",
        "outputId": "4648cce6-b86d-4acd-bb85-0731f8d99eef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0.3567, 0.2231])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nn.functional.nll_loss(torch.log(preds), label, reduction='none')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JZrfBX9uCzLg",
        "outputId": "0e0a0ccb-cd5f-409e-a5f4-2908e7ad4ffc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([0.3567, 0.2231])"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "o8UP4OKtF9Vt"
      },
      "source": [
        "\n",
        "# PyTorch - Autograd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Av2iCBoFV2L",
        "outputId": "db5f18aa-0bdd-42c1-c7e1-ac4823563872"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([4., 6.])\n"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "\n",
        "# requires_grad=True로 설정된 텐서 생성\n",
        "x = torch.tensor([2.0, 3.0], requires_grad=True)\n",
        "\n",
        "# 텐서의 연산\n",
        "y = x ** 2  # y = [4, 9]\n",
        "z = y.sum()  # z = 13\n",
        "\n",
        "# 역전파 수행\n",
        "z.backward()\n",
        "\n",
        "# x에 대한 z의 그래디언트 (z가 x에 대해 어떻게 변화하는지를 계산, 편미분 수행)\n",
        "print(x.grad)  # 출력: tensor([4., 6.])\n",
        "# z = x1^2 + x2^2\n",
        "# dz/dx1 = 2 * x1 = 2 * 2 = 4\n",
        "# dz/dx2 = 2 * x2 = 2 * 3 = 6"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "8GZiSaLoFV4i",
        "outputId": "a0079135-b4cf-4c1b-c295-837a32dccd20"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 데이터 생성\n",
        "torch.manual_seed(0)  # 시드 고정으로 동일한 랜덤값 생성\n",
        "x = torch.rand(100, 1) * 10  # 0에서 10 사이의 랜덤한 데이터 100개 생성\n",
        "y = 2 * x + 3 + torch.randn(100, 1)  # y = 2x + 3 + 잡음 추가\n",
        "\n",
        "# 데이터 시각화\n",
        "plt.scatter(x.numpy(), y.numpy(), label='Data')\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('Y')\n",
        "plt.title('Generated Data')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "32SiEPNBFZJH",
        "outputId": "b422b17a-bafb-4909-87c6-24984d281fba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Initial w: 1.5409960746765137, b: -0.293428897857666\n"
          ]
        }
      ],
      "source": [
        "# 모델 초기화\n",
        "torch.manual_seed(0)  # 시드 고정으로 동일한 랜덤값 생성\n",
        "w = torch.randn(1, requires_grad=True)  # 랜덤 초기값\n",
        "b = torch.randn(1, requires_grad=True)  # 랜덤 초기값\n",
        "\n",
        "print(f\"Initial w: {w.item()}, b: {b.item()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_kBsNRoUFZLs"
      },
      "outputs": [],
      "source": [
        "# 손실 함수 정의 (평균 제곱 오차)\n",
        "def mse_loss(y_pred, y_true):\n",
        "    return ((y_pred - y_true) ** 2).mean()\n",
        "\n",
        "# 학습률 설정\n",
        "learning_rate = 0.001"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_9dbxOQLFZOC",
        "outputId": "f3e53fc6-04c0-49ef-fd78-08af96c38b51"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0: Loss = 32.70864486694336\n",
            "Epoch 1000: Loss = 1.9336096048355103\n",
            "Epoch 2000: Loss = 1.196832537651062\n",
            "Epoch 3000: Loss = 0.9352188110351562\n",
            "Epoch 4000: Loss = 0.8423238396644592\n",
            "Epoch 5000: Loss = 0.8093385100364685\n",
            "Epoch 6000: Loss = 0.7976260185241699\n",
            "Epoch 7000: Loss = 0.7934672832489014\n",
            "Epoch 8000: Loss = 0.7919902801513672\n",
            "Epoch 9000: Loss = 0.7914661169052124\n",
            "Final w: 1.9344022274017334, b: 3.312502861022949\n"
          ]
        }
      ],
      "source": [
        "# 경사하강법 수행\n",
        "epochs = 10000\n",
        "for epoch in range(epochs):\n",
        "    # 순전파 단계: 예측 값 계산\n",
        "    y_pred = w * x + b\n",
        "\n",
        "    # 손실 계산\n",
        "    loss = mse_loss(y_pred, y)\n",
        "\n",
        "    # 역전파 단계: 손실에 대한 w와 b의 그래디언트 계산\n",
        "    loss.backward()\n",
        "\n",
        "    # 경사하강법을 사용하여 파라미터 업데이트\n",
        "    with torch.no_grad():  # 그래디언트 추적을 중지하고 업데이트\n",
        "        w -= learning_rate * w.grad\n",
        "        b -= learning_rate * b.grad\n",
        "\n",
        "    # 업데이트 후에 그래디언트를 0으로 초기화\n",
        "    w.grad.zero_()\n",
        "    b.grad.zero_()\n",
        "\n",
        "    # 1000번째 에포크마다 로그 출력\n",
        "    if epoch % 1000 == 0:\n",
        "        print(f\"Epoch {epoch}: Loss = {loss.item()}\")\n",
        "\n",
        "print(f\"Final w: {w.item()}, b: {b.item()}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "bXPdqkVIFdOh",
        "outputId": "f5f11788-d5b0-4327-e706-8790653618f4"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 학습된 모델의 예측값 계산\n",
        "y_pred = w * x + b\n",
        "\n",
        "# 데이터와 모델 시각화\n",
        "plt.scatter(x.numpy(), y.numpy(), label='Data')\n",
        "plt.plot(x.numpy(), y_pred.detach().numpy(), color='red', label='Fitted line')\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('Y')\n",
        "plt.title('Data and Fitted Line')\n",
        "plt.legend()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OeN93zMUGFYS"
      },
      "source": [
        "# PyTorch - DataLoader"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kl1OlyuaFdQm"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "from torch.utils.data import DataLoader, Dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gntH1bulFdSt"
      },
      "outputs": [],
      "source": [
        "class CustomDataset(Dataset):\n",
        "    def __init__(self, data, labels):\n",
        "        self.data = data\n",
        "        self.labels = labels\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        x = self.data[idx]\n",
        "        y = self.labels[idx]\n",
        "        return x, y"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qApXyqUWFh0D"
      },
      "outputs": [],
      "source": [
        "# 예시 데이터\n",
        "data = torch.randn(100, 3)  # 100개의 샘플, 각 샘플은 3차원 벡터\n",
        "labels = torch.randint(0, 2, (100,))  # 이진 분류를 위한 100개의 레이블\n",
        "\n",
        "# 데이터셋 및 DataLoader 생성\n",
        "dataset = CustomDataset(data, labels)\n",
        "dataloader = DataLoader(dataset, batch_size=3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "y5hblcTfFh2Z",
        "outputId": "4e7e5c66-6557-4bfd-ba03-f2da6c2d3e5c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[ 0.8487,  0.6920, -0.3160],\n",
              "         [-2.1152, -0.3561,  0.4372],\n",
              "         [ 0.4913, -0.2041,  0.1198]]),\n",
              " tensor([1, 1, 1]))"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "# DataLoader에서 모든 배치를 리스트로 변환\n",
        "all_batches = list(dataloader)\n",
        "batch_data, batch_labels = all_batches[0] # 첫번째 배치 조회\n",
        "batch_data, batch_labels"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7NtURtx0a89B",
        "outputId": "4d336cdf-2349-4fce-b144-ec9d58fd1016"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[-0.0332, -0.4186, -0.2556]]), tensor([1]))"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "batch_data, batch_labels = all_batches[-1] # 마지막 배치 조회\n",
        "batch_data, batch_labels"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "811v_TtYa89B",
        "outputId": "4624f113-b87a-415e-9823-317555ba254f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[-1.2295, -1.3700,  1.5435],\n",
              "         [-0.0332, -0.4186, -0.2556]]),\n",
              " tensor([1, 1]))"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ],
      "source": [
        "dataloader = DataLoader(dataset, batch_size=7)\n",
        "all_batches = list(dataloader)\n",
        "batch_data, batch_labels = all_batches[-1] # 마지막 배치 조회\n",
        "batch_data, batch_labels"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zogFK11ca89C",
        "outputId": "0d78c4ce-40c5-4cff-8052-4a137239386b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[-1.0411, -1.1559, -0.3167],\n",
              "         [-0.4127,  0.9663,  1.6248]]),\n",
              " tensor([0, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "dataloader = DataLoader(dataset, batch_size=7, shuffle=True)\n",
        "all_batches = list(dataloader)\n",
        "batch_data, batch_labels = all_batches[-1] # 마지막 배치 조회\n",
        "batch_data, batch_labels"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OIQEnJhza89C",
        "outputId": "3d847ce2-54b4-47d1-b1fe-c560e10ae593"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[ 0.1447,  1.9029,  0.3904],\n",
              "         [-0.2303, -0.3918,  0.5433],\n",
              "         [ 0.1239,  1.1648,  0.9234],\n",
              "         [ 2.0050,  0.0537,  0.4397],\n",
              "         [ 0.0335,  0.7101, -1.5353],\n",
              "         [ 0.3398, -1.2537,  0.9868],\n",
              "         [ 1.2377,  1.1168, -0.2473]]),\n",
              " tensor([0, 1, 0, 0, 1, 1, 0]))"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "dataloader = DataLoader(dataset, batch_size=7, shuffle=True, drop_last=True)\n",
        "all_batches = list(dataloader)\n",
        "batch_data, batch_labels = all_batches[-1] # 마지막 배치 조회\n",
        "batch_data, batch_labels"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K74iF0yba89C"
      },
      "source": [
        "# PyTorch - 다양한 DataLoader"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "izS9B5UPFh49",
        "outputId": "1f67ee33-36c7-4b48-b8e4-a2761ce886a0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   feature1  feature2  label\n",
              "0         1         5      0\n",
              "1         2         4      1\n",
              "2         3         3      0\n",
              "3         4         2      1\n",
              "4         5         1      0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-338a416b-f07e-4e85-909c-bcd9006e8366\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature1</th>\n",
              "      <th>feature2</th>\n",
              "      <th>label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-338a416b-f07e-4e85-909c-bcd9006e8366')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-338a416b-f07e-4e85-909c-bcd9006e8366 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-338a416b-f07e-4e85-909c-bcd9006e8366');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-569069ad-d58d-4c55-a2e3-aaa95f32868d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-569069ad-d58d-4c55-a2e3-aaa95f32868d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-569069ad-d58d-4c55-a2e3-aaa95f32868d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c74be11a-131a-4284-866a-6433fc2232e0\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c74be11a-131a-4284-866a-6433fc2232e0 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"feature1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2,\n          5,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 5,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# 예시 데이터 생성\n",
        "data = {\n",
        "    'feature1': [1, 2, 3, 4, 5],\n",
        "    'feature2': [5, 4, 3, 2, 1],\n",
        "    'label': [0, 1, 0, 1, 0]\n",
        "}\n",
        "df = pd.DataFrame(data)\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_MdQKXv9Fh7B",
        "outputId": "c842d852-d683-4fca-852e-95017d10bf89"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[4., 2.],\n",
            "        [1., 5.]])\n",
            "tensor([1, 0])\n"
          ]
        }
      ],
      "source": [
        "# Custom Dataset 클래스 정의\n",
        "class DataFrameDataset(Dataset):\n",
        "    def __init__(self, dataframe):\n",
        "        self.dataframe = dataframe\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.dataframe)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        row = self.dataframe.iloc[idx] # idx번째 행 선택\n",
        "        # features와 label을 분리하여 텐서로 변환\n",
        "        features = torch.tensor(row[['feature1', 'feature2']].values, dtype=torch.float32)\n",
        "        label = torch.tensor(row['label'], dtype=torch.long)\n",
        "        return features, label\n",
        "\n",
        "# DataLoader 생성\n",
        "dataset = DataFrameDataset(df)\n",
        "dataloader = DataLoader(dataset, batch_size=2, shuffle=True)\n",
        "\n",
        "# 1개의 배치 가져오기\n",
        "batch_data, batch_labels = next(iter(dataloader))\n",
        "print(batch_data)\n",
        "print(batch_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_C0zJ_B1FdVD",
        "outputId": "f8835e06-cef2-4a1f-c012-fba1aaa062b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz to data/cifar-10-python.tar.gz\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 170498071/170498071 [00:02<00:00, 78575069.23it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Extracting data/cifar-10-python.tar.gz to data\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(tensor([[[0.8000, 0.8000, 0.8000,  ..., 0.8471, 0.8471, 0.8471],\n",
              "          [0.8000, 0.8000, 0.8000,  ..., 0.8471, 0.8471, 0.8471],\n",
              "          [0.8000, 0.8000, 0.8000,  ..., 0.8471, 0.8471, 0.8471],\n",
              "          ...,\n",
              "          [0.2275, 0.2275, 0.2275,  ..., 0.2863, 0.2902, 0.2902],\n",
              "          [0.2275, 0.2275, 0.2275,  ..., 0.2863, 0.2902, 0.2902],\n",
              "          [0.2275, 0.2275, 0.2275,  ..., 0.2863, 0.2902, 0.2902]],\n",
              " \n",
              "         [[0.7843, 0.7843, 0.7843,  ..., 0.8431, 0.8431, 0.8431],\n",
              "          [0.7843, 0.7843, 0.7843,  ..., 0.8431, 0.8431, 0.8431],\n",
              "          [0.7843, 0.7843, 0.7843,  ..., 0.8431, 0.8431, 0.8431],\n",
              "          ...,\n",
              "          [0.2902, 0.2902, 0.2902,  ..., 0.3647, 0.3647, 0.3647],\n",
              "          [0.2902, 0.2902, 0.2902,  ..., 0.3647, 0.3647, 0.3647],\n",
              "          [0.2902, 0.2902, 0.2902,  ..., 0.3647, 0.3647, 0.3647]],\n",
              " \n",
              "         [[0.7961, 0.7961, 0.7961,  ..., 0.8314, 0.8314, 0.8314],\n",
              "          [0.7961, 0.7961, 0.7961,  ..., 0.8314, 0.8314, 0.8314],\n",
              "          [0.7961, 0.7961, 0.7961,  ..., 0.8314, 0.8314, 0.8314],\n",
              "          ...,\n",
              "          [0.3216, 0.3216, 0.3216,  ..., 0.4078, 0.4118, 0.4118],\n",
              "          [0.3216, 0.3216, 0.3216,  ..., 0.4078, 0.4118, 0.4118],\n",
              "          [0.3216, 0.3216, 0.3216,  ..., 0.4078, 0.4118, 0.4118]]]),\n",
              " tensor(8))"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "from torchvision import datasets, transforms\n",
        "\n",
        "# 이미지 전처리 설정\n",
        "transform = transforms.Compose([\n",
        "    transforms.Resize((128, 128)), # 이미지 크기 변경 (128x128)\n",
        "    transforms.ToTensor()          # Tensor로 변환\n",
        "])\n",
        "\n",
        "# torchvision 데이터셋 로드\n",
        "dataset = datasets.CIFAR10(root='data', train=True, transform=transform, download=True)\n",
        "\n",
        "# DataLoader 생성\n",
        "dataloader = DataLoader(dataset, batch_size=4, shuffle=True, num_workers=2)\n",
        "\n",
        "# 1개의 배치 가져오기\n",
        "batch_image, batch_labels = next(iter(dataloader))\n",
        "batch_image[0], batch_labels[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "r6GBL3ozFZQo",
        "outputId": "6cb0886f-61ba-45d2-8d54-e49c4b6960d0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 첫 번째 이미지를 가져와 시각화\n",
        "img = batch_image[0]  # 첫 번째 이미지를 가져옴\n",
        "label = batch_labels[0]  # 첫 번째 이미지의 라벨\n",
        "\n",
        "# 이미지를 [C, H, W] -> [H, W, C]로 변환\n",
        "img = img.permute(1, 2, 0)\n",
        "\n",
        "# 이미지 시각화\n",
        "plt.imshow(img)\n",
        "plt.title(f'Label: {label.item()}')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3HZeuT5KFvdK"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "from PIL import Image\n",
        "\n",
        "# Custom Dataset 클래스 정의\n",
        "class CatDogDataset(Dataset):\n",
        "    def __init__(self, root_dir, transform=None):\n",
        "        self.root_dir = root_dir\n",
        "        self.transform = transform\n",
        "\n",
        "        # 모든 이미지 파일과 해당 라벨(폴더 이름에 따라)을 저장\n",
        "        self.image_paths = []\n",
        "        self.labels = []\n",
        "\n",
        "        for label, sub_dir in enumerate(['cat', 'dog']):  # 0: cat, 1: dog\n",
        "            full_dir = os.path.join(root_dir, sub_dir)\n",
        "            for img_name in os.listdir(full_dir):\n",
        "                img_path = os.path.join(full_dir, img_name)\n",
        "                self.image_paths.append(img_path)\n",
        "                self.labels.append(label)\n",
        "\n",
        "    def __len__(self):\n",
        "        \"\"\"데이터셋의 크기 반환\"\"\"\n",
        "        return len(self.image_paths)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        \"\"\"주어진 인덱스의 이미지와 라벨 반환\"\"\"\n",
        "        img_path = self.image_paths[idx]\n",
        "        image = Image.open(img_path)  # 이미지 로드\n",
        "        label = self.labels[idx]      # 라벨 (0: cat, 1: dog)\n",
        "\n",
        "        if self.transform:\n",
        "            image = self.transform(image)\n",
        "\n",
        "        return image, label"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JOSkq4dCa89G",
        "outputId": "89d04677-b681-466b-da7f-ff5ad506ec74",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'파일을 성공적으로 저장하였습니다.: data.zip'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "from JAEN import download_file\n",
        "\n",
        "#이미지 데이터로더를 위한 샘플 데이터셋 다운로드\n",
        "download_file('dataloader')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "t8bvtXYLa89G",
        "outputId": "d4032d3b-00d3-4308-9a0c-14312f5f256d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'data.zip' 파일이 'data' 폴더로 성공적으로 압축 해제되었습니다.\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import zipfile\n",
        "\n",
        "# 압축파일 경로와 압축 해제할 폴더 경로 지정\n",
        "zip_file_path = 'data.zip'\n",
        "extract_to = 'data'\n",
        "\n",
        "# 'data' 폴더가 없으면 생성\n",
        "if not os.path.exists(extract_to):\n",
        "    os.makedirs(extract_to)\n",
        "\n",
        "# zip 파일 열고 압축 해제\n",
        "with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n",
        "    zip_ref.extractall(extract_to)\n",
        "\n",
        "print(f\"'{zip_file_path}' 파일이 '{extract_to}' 폴더로 성공적으로 압축 해제되었습니다.\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "joUzqAi8Fvfx",
        "outputId": "c3f20d2d-b1d9-4ea2-c3b3-03240db6233d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[[[0.2667, 0.2196, 0.2118,  ..., 0.5686, 0.6235, 0.5333],\n",
            "          [0.3765, 0.3843, 0.3373,  ..., 0.5843, 0.5961, 0.5412],\n",
            "          [0.4588, 0.6941, 0.6980,  ..., 0.6039, 0.6078, 0.5647],\n",
            "          ...,\n",
            "          [0.3529, 0.3451, 0.6941,  ..., 0.2039, 0.2118, 0.1922],\n",
            "          [0.4078, 0.3176, 0.6392,  ..., 0.2118, 0.1882, 0.3490],\n",
            "          [0.4431, 0.3059, 0.5922,  ..., 0.1765, 0.2392, 0.6745]],\n",
            "\n",
            "         [[0.2039, 0.1647, 0.1647,  ..., 0.5490, 0.6000, 0.5059],\n",
            "          [0.3098, 0.3176, 0.2667,  ..., 0.5451, 0.5529, 0.4980],\n",
            "          [0.4549, 0.6824, 0.6784,  ..., 0.5569, 0.5529, 0.5059],\n",
            "          ...,\n",
            "          [0.3216, 0.3020, 0.6353,  ..., 0.1647, 0.1725, 0.1569],\n",
            "          [0.3765, 0.2745, 0.5843,  ..., 0.1608, 0.1412, 0.3059],\n",
            "          [0.4157, 0.2627, 0.5333,  ..., 0.1216, 0.1882, 0.6314]],\n",
            "\n",
            "         [[0.2275, 0.1843, 0.1882,  ..., 0.4784, 0.5255, 0.4353],\n",
            "          [0.3843, 0.3922, 0.3373,  ..., 0.4824, 0.4902, 0.4314],\n",
            "          [0.5529, 0.7765, 0.7647,  ..., 0.4941, 0.4902, 0.4471],\n",
            "          ...,\n",
            "          [0.3686, 0.3451, 0.6784,  ..., 0.2471, 0.2314, 0.1961],\n",
            "          [0.4118, 0.3098, 0.6196,  ..., 0.2353, 0.1882, 0.3255],\n",
            "          [0.4431, 0.2902, 0.5647,  ..., 0.1843, 0.2235, 0.6314]]]])\n",
            "tensor([0])\n"
          ]
        }
      ],
      "source": [
        "# 이미지 전처리 (크기 조정 및 텐서 변환)\n",
        "transform = transforms.Compose([\n",
        "    transforms.Resize((128, 128)),  # 이미지 크기를 128x128로 변경\n",
        "    transforms.ToTensor()           # 이미지를 텐서로 변환\n",
        "])\n",
        "\n",
        "# Custom Dataset을 사용하여 train 데이터셋을 로드\n",
        "train_dataset = CatDogDataset(root_dir='data/catvsdog/train', transform=transform)\n",
        "train_loader = DataLoader(train_dataset, batch_size=1, shuffle=True)\n",
        "\n",
        "# 첫 번째 배치 확인 (예시)\n",
        "batch_data, batch_labels = next(iter(train_loader))\n",
        "print(batch_data)\n",
        "print(batch_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4EJEH1_3FviY",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "2763eca6-9597-4e3a-b9cf-1c2b33556df9"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# 첫 번째 이미지를 가져와 시각화\n",
        "img = batch_data[0]  # 첫 번째 이미지를 가져옴\n",
        "label = batch_data[0]  # 첫 번째 이미지의 라벨\n",
        "\n",
        "# 이미지를 [C, H, W] -> [H, W, C]로 변환\n",
        "img = img.permute(1, 2, 0)\n",
        "\n",
        "# 이미지 시각화\n",
        "plt.imshow(img)\n",
        "plt.title(f'Label: {batch_labels.item()}')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OcSGahqEFZTO",
        "outputId": "fd49a880-f728-4aad-d75e-29a5345c8c32"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0 0 1 1 1 0 0]\n",
            " [0 1 0 0 0 1 0]\n",
            " [1 0 2 0 1 0 1]]\n"
          ]
        }
      ],
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "texts = [\"I love machine learning\", \"PyTorch is great\", \"Deep learning is a subset of machine learning\"]\n",
        "labels = [1, 0, 1]\n",
        "\n",
        "# 텍스트 문서나 문장들을 각 단어의 빈도로 표현하여 기계 학습 모델에 입력할 수 있는 형태로 변환\n",
        "vectorizer = CountVectorizer(stop_words='english') # 불용어 제거\n",
        "vectorized_texts = vectorizer.fit_transform(texts).toarray()\n",
        "vectorized_texts\n",
        "\n",
        "# 벡터의 형태\n",
        "print(vectorized_texts)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s2M_z091FpaO",
        "outputId": "4f63a8a3-4868-4b85-9cc3-3a81ce354f54"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['deep' 'great' 'learning' 'love' 'machine' 'pytorch' 'subset']\n"
          ]
        }
      ],
      "source": [
        "# 어휘 사전 출력\n",
        "print(vectorizer.get_feature_names_out())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O_wp99r8Fpci",
        "outputId": "1fe96efa-4811-4055-c0a4-163540425613"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "역변환된 단어들:\n",
            " [array(['learning', 'love', 'machine'], dtype='<U8'), array(['great', 'pytorch'], dtype='<U8'), array(['deep', 'learning', 'machine', 'subset'], dtype='<U8')]\n"
          ]
        }
      ],
      "source": [
        "# 어휘 사전 기반 단어 변환\n",
        "inversed = vectorizer.inverse_transform(vectorized_texts)\n",
        "print(\"역변환된 단어들:\\n\", inversed)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aD_4cBzRFpfI",
        "outputId": "3af66dab-7024-4137-8baa-96d88572f6ff"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[0., 0., 1., 1., 1., 0., 0.],\n",
            "        [0., 1., 0., 0., 0., 1., 0.]])\n",
            "tensor([1, 0])\n"
          ]
        }
      ],
      "source": [
        "# Custom Dataset 클래스 정의\n",
        "class TextDataset(Dataset):\n",
        "    def __init__(self, texts, labels):\n",
        "        self.texts = texts\n",
        "        self.labels = labels\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.texts)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        text_vector = torch.tensor(self.texts[idx], dtype=torch.float32)\n",
        "        label = torch.tensor(self.labels[idx], dtype=torch.long)\n",
        "        return text_vector, label\n",
        "\n",
        "# DataLoader 생성\n",
        "dataset = TextDataset(vectorized_texts, labels)\n",
        "dataloader = DataLoader(dataset, batch_size=2, shuffle=True)\n",
        "\n",
        "# 1개의 배치 가져오기\n",
        "batch_data, batch_labels = next(iter(dataloader))\n",
        "print(batch_data)\n",
        "print(batch_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nsAEEqJ3Fphf",
        "outputId": "14b131af-5488-41da-a5bb-f428958bc955"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[{'text': 'PyTorch is great', 'label': 0},\n",
              " {'text': 'I love deep learning', 'label': 1},\n",
              " {'text': 'Transformers are powerful', 'label': 1}]"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "import json\n",
        "\n",
        "# 예시 JSON 데이터 로드\n",
        "json_data = '''\n",
        "[\n",
        "    {\"text\": \"PyTorch is great\", \"label\": 0},\n",
        "    {\"text\": \"I love deep learning\", \"label\": 1},\n",
        "    {\"text\": \"Transformers are powerful\", \"label\": 1}\n",
        "]\n",
        "'''\n",
        "\n",
        "data = json.loads(json_data)\n",
        "data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cgXtU_ybFZVk",
        "outputId": "e05f7342-94d2-44f7-b410-91089a58e649"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "tensor([[3.],\n",
            "        [3.]])\n",
            "tensor([1, 0])\n"
          ]
        }
      ],
      "source": [
        "# Custom Dataset 클래스 정의\n",
        "class JSONDataset(Dataset):\n",
        "    def __init__(self, data):\n",
        "        self.data = data\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        text = self.data[idx]['text']\n",
        "        label = self.data[idx]['label']\n",
        "        # 간단한 텍스트 벡터화 (예시로 단어 길이 사용)\n",
        "        text_vector = torch.tensor([len(text.split())], dtype=torch.float32)\n",
        "        label = torch.tensor(label, dtype=torch.long)\n",
        "        return text_vector, label\n",
        "\n",
        "# DataLoader 생성\n",
        "dataset = JSONDataset(data)\n",
        "dataloader = DataLoader(dataset, batch_size=2, shuffle=True)\n",
        "\n",
        "# 1개의 배치 가져오기\n",
        "batch_data, batch_labels = next(iter(dataloader))\n",
        "print(batch_data)\n",
        "print(batch_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E0EWjif4F4o8"
      },
      "source": [
        "# 심층신경망"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EEgc270cNUvx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0b5f77b1-fcaa-4606-ec41-0224a6a7cb9e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[-0.7783],\n",
              "        [ 0.4157]], requires_grad=True)"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ],
      "source": [
        "# 데이터 생성 (AND)\n",
        "X = torch.tensor([[0.0, 0.0], [0.0, 1.0], [1.0, 0.0], [1.0, 1.0]])\n",
        "y = torch.tensor([[0.0], [0.0], [0.0], [1.0]]) # 입력 2차원, 출력 1차원\n",
        "\n",
        "# 가중치와 편향 초기화\n",
        "weights = torch.randn((2, 1), requires_grad=True)\n",
        "bias = torch.randn(1, requires_grad=True)\n",
        "weights"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CO6XUSmYNUyF"
      },
      "outputs": [],
      "source": [
        "# 활성화 함수 (Sigmoid)\n",
        "def sigmoid(x):\n",
        "    return 1 / (1 + torch.exp(-x))\n",
        "\n",
        "# 학습률 설정\n",
        "learning_rate = 0.1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "isZ-SIGTNU0M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af6557d9-4da7-46b7-8843-819edd1c6c8a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [1000/10000], Loss: 0.0619\n",
            "Epoch [2000/10000], Loss: 0.0334\n",
            "Epoch [3000/10000], Loss: 0.0220\n",
            "Epoch [4000/10000], Loss: 0.0161\n",
            "Epoch [5000/10000], Loss: 0.0126\n",
            "Epoch [6000/10000], Loss: 0.0102\n",
            "Epoch [7000/10000], Loss: 0.0086\n",
            "Epoch [8000/10000], Loss: 0.0074\n",
            "Epoch [9000/10000], Loss: 0.0065\n",
            "Epoch [10000/10000], Loss: 0.0058\n"
          ]
        }
      ],
      "source": [
        "# 훈련 과정\n",
        "for epoch in range(10000):\n",
        "    # 순전파\n",
        "    z = X @ weights + bias  # X와 가중치를 곱하고 편향 추가\n",
        "    predictions = sigmoid(z)  # 활성화 함수 적용\n",
        "\n",
        "    # 손실 계산 (평균 제곱 오차)\n",
        "    loss = torch.mean((predictions - y) ** 2)\n",
        "\n",
        "    # 역전파\n",
        "    loss.backward()\n",
        "\n",
        "    # 경사 하강법으로 가중치 및 편향 업데이트\n",
        "    with torch.no_grad():\n",
        "        weights -= learning_rate * weights.grad\n",
        "        bias -= learning_rate * bias.grad\n",
        "\n",
        "        # 기울기 초기화\n",
        "        weights.grad.zero_()\n",
        "        bias.grad.zero_()\n",
        "\n",
        "    if (epoch + 1) % 1000 == 0:\n",
        "        print(f'Epoch [{epoch+1}/10000], Loss: {loss.item():.4f}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZOTwJum7NYa6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9e6f0f35-87f8-4da4-dcba-f2ff72691c60"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Labels: \n",
            "tensor([[0.],\n",
            "        [0.],\n",
            "        [0.],\n",
            "        [1.]])\n"
          ]
        }
      ],
      "source": [
        "# 결과 확인\n",
        "with torch.no_grad():\n",
        "    z = X @ weights + bias\n",
        "    predictions = sigmoid(z)\n",
        "    predicted_labels = (predictions >= 0.5).float()  # 0.5 이상은 1, 미만은 0으로 변환\n",
        "    print(\"Predicted Labels: \", predicted_labels, sep='\\n')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rVgw2cz4NZY3"
      },
      "outputs": [],
      "source": [
        "# 데이터 생성 (XOR)\n",
        "X = torch.tensor([[0.0, 0.0], [0.0, 1.0], [1.0, 0.0], [1.0, 1.0]])\n",
        "y = torch.tensor([[0.0], [1.0], [1.0], [0.0]])"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 가중치와 편향 초기화\n",
        "weights = torch.randn((2, 1), requires_grad=True)\n",
        "bias = torch.randn(1, requires_grad=True)\n",
        "weights"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OYW6Alq7nvpN",
        "outputId": "bebcccdf-cea2-4bdc-fcdd-f242e7cf712c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[-1.3715],\n",
              "        [ 1.0991]], requires_grad=True)"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 훈련 과정\n",
        "for epoch in range(10000):\n",
        "    # 순전파\n",
        "    z = X @ weights + bias  # X와 가중치를 곱하고 편향 추가\n",
        "    predictions = sigmoid(z)  # 활성화 함수 적용\n",
        "\n",
        "    # 손실 계산 (평균 제곱 오차)\n",
        "    loss = torch.mean((predictions - y) ** 2)\n",
        "\n",
        "    # 역전파\n",
        "    loss.backward()\n",
        "\n",
        "    # 경사 하강법으로 가중치 및 편향 업데이트\n",
        "    with torch.no_grad():\n",
        "        weights -= learning_rate * weights.grad\n",
        "        bias -= learning_rate * bias.grad\n",
        "\n",
        "        # 기울기 초기화\n",
        "        weights.grad.zero_()\n",
        "        bias.grad.zero_()\n",
        "\n",
        "    if (epoch + 1) % 1000 == 0:\n",
        "        print(f'Epoch [{epoch+1}/10000], Loss: {loss.item():.4f}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1QaDgpnAnxe2",
        "outputId": "952735e3-87e3-4101-af58-cb6ef14c5cf0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [1000/10000], Loss: 0.2508\n",
            "Epoch [2000/10000], Loss: 0.2500\n",
            "Epoch [3000/10000], Loss: 0.2500\n",
            "Epoch [4000/10000], Loss: 0.2500\n",
            "Epoch [5000/10000], Loss: 0.2500\n",
            "Epoch [6000/10000], Loss: 0.2500\n",
            "Epoch [7000/10000], Loss: 0.2500\n",
            "Epoch [8000/10000], Loss: 0.2500\n",
            "Epoch [9000/10000], Loss: 0.2500\n",
            "Epoch [10000/10000], Loss: 0.2500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 결과 확인\n",
        "with torch.no_grad():\n",
        "    z = X @ weights + bias\n",
        "    predictions = sigmoid(z)\n",
        "    predicted_labels = (predictions >= 0.5).float()  # 0.5 이상은 1, 미만은 0으로 변환\n",
        "    print(\"Predicted Labels: \", predicted_labels, sep='\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-0yNgXQfn0ip",
        "outputId": "d690fc82-b390-46a7-dc9a-41fd42a6a2f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Labels: \n",
            "tensor([[0.],\n",
            "        [1.],\n",
            "        [1.],\n",
            "        [1.]])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "MPsQcoMZNYdP"
      },
      "outputs": [],
      "source": [
        "# 가중치와 편향 초기화\n",
        "weights_1 = torch.randn(2, 4, requires_grad=True)  # 입력 2차원, 은닉층 4차원\n",
        "bias_1 = torch.randn(4, requires_grad=True)\n",
        "\n",
        "weights_2 = torch.randn(4, 1, requires_grad=True)  # 은닉층 4차원, 출력 1차원\n",
        "bias_2 = torch.randn(1, requires_grad=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8LEvEXN_NYfU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e2b84322-759e-4a6b-e01f-1af112b52bd6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch [1000/10000], Loss: 0.2330\n",
            "Epoch [2000/10000], Loss: 0.1891\n",
            "Epoch [3000/10000], Loss: 0.0952\n",
            "Epoch [4000/10000], Loss: 0.0389\n",
            "Epoch [5000/10000], Loss: 0.0202\n",
            "Epoch [6000/10000], Loss: 0.0128\n",
            "Epoch [7000/10000], Loss: 0.0091\n",
            "Epoch [8000/10000], Loss: 0.0069\n",
            "Epoch [9000/10000], Loss: 0.0055\n",
            "Epoch [10000/10000], Loss: 0.0046\n"
          ]
        }
      ],
      "source": [
        "# 훈련 과정\n",
        "for epoch in range(10000):\n",
        "    # 순전파 (입력 -> 은닉층)\n",
        "    z1 = X @ weights_1 + bias_1\n",
        "    a1 = sigmoid(z1)\n",
        "\n",
        "    # 순전파 (은닉층 -> 출력층)\n",
        "    z2 = a1 @ weights_2 + bias_2\n",
        "    predictions = sigmoid(z2)\n",
        "\n",
        "    # 손실 계산 (평균 제곱 오차)\n",
        "    loss = torch.mean((predictions - y) ** 2)\n",
        "\n",
        "    # 역전파\n",
        "    loss.backward()\n",
        "\n",
        "    # 경사 하강법으로 가중치 및 편향 업데이트\n",
        "    with torch.no_grad():\n",
        "        weights_1 -= learning_rate * weights_1.grad\n",
        "        bias_1 -= learning_rate * bias_1.grad\n",
        "        weights_2 -= learning_rate * weights_2.grad\n",
        "        bias_2 -= learning_rate * bias_2.grad\n",
        "\n",
        "        # 기울기 초기화\n",
        "        weights_1.grad.zero_()\n",
        "        bias_1.grad.zero_()\n",
        "        weights_2.grad.zero_()\n",
        "        bias_2.grad.zero_()\n",
        "\n",
        "    if (epoch + 1) % 1000 == 0:\n",
        "        print(f'Epoch [{epoch+1}/10000], Loss: {loss.item():.4f}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "C-YpDS8gNbdZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a9ade847-e371-467d-814d-5834937d0713"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted Labels: \n",
            "tensor([[0.],\n",
            "        [1.],\n",
            "        [1.],\n",
            "        [0.]])\n"
          ]
        }
      ],
      "source": [
        "# 결과 확인\n",
        "with torch.no_grad():\n",
        "    z1 = X @ weights_1 + bias_1\n",
        "    a1 = sigmoid(z1)\n",
        "    z2 = a1 @ weights_2 + bias_2\n",
        "    predictions = sigmoid(z2)\n",
        "    # 확률값을 이진 라벨로 변환\n",
        "    predicted_labels = (predictions >= 0.5).float()  # 0.5 이상은 1, 미만은 0으로 변환\n",
        "    print(\"Predicted Labels: \", predicted_labels, sep='\\n')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 470
        },
        "id": "efNn2uHza89I",
        "outputId": "9ea22179-15e6-4f62-d119-40c0356db38f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 1.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# import numpy as np\n",
        "# import matplotlib.pyplot as plt\n",
        "# from sklearn.neural_network import MLPClassifier\n",
        "# from sklearn.metrics import accuracy_score\n",
        "\n",
        "# # XOR 데이터 생성\n",
        "# X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n",
        "# y = np.array([0, 1, 1, 0])  # XOR의 출력\n",
        "\n",
        "# # MLP 모델 생성\n",
        "# mlp = MLPClassifier(hidden_layer_sizes=(10,), activation='relu', solver='adam', max_iter=10000)\n",
        "# mlp.fit(X, y)\n",
        "\n",
        "# # XOR 문제 학습\n",
        "# predictions = mlp.predict(X)\n",
        "# print(f'Accuracy: {accuracy_score(y, predictions)}')\n",
        "\n",
        "# # 결정 경계 시각화\n",
        "# def plot_decision_boundary(model, X, y):\n",
        "#     x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1\n",
        "#     y_min, y_max = X[:, 1].min() - 0.1, X[:, 1].max() + 0.1\n",
        "#     xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.01),\n",
        "#                          np.arange(y_min, y_max, 0.01))\n",
        "\n",
        "#     Z = model.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "#     Z = Z.reshape(xx.shape)\n",
        "\n",
        "#     plt.contourf(xx, yy, Z, alpha=0.8, cmap=plt.cm.Paired)\n",
        "#     plt.scatter(X[:, 0], X[:, 1], c=y, s=100, edgecolors='k')\n",
        "#     plt.title(\"XOR Decision Boundary (Multi-Layer Perceptron)\")\n",
        "#     plt.show()\n",
        "\n",
        "# plot_decision_boundary(mlp, X, y)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UdlVEaFmNYh6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "61e05eb4-f4a9-4841-cb9f-c0292346ebec"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((569, 30), (569,))"
            ]
          },
          "metadata": {},
          "execution_count": 134
        }
      ],
      "source": [
        "from sklearn.datasets import load_breast_cancer\n",
        "# Breast Cancer 데이터 로드\n",
        "data = load_breast_cancer()\n",
        "X = data.data  # 입력 데이터 (특징)\n",
        "y = data.target  # 타겟 데이터 (라벨: 0 또는 1)\n",
        "X.shape, y.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "w-soz4X_Ni7k",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0dbed9c-879e-4683-c380-f96a34701602"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((455, 30), (114, 30), (455,), (114,))"
            ]
          },
          "metadata": {},
          "execution_count": 135
        }
      ],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "# 데이터를 학습용/테스트용으로 나누기\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rWxVBu9DNi9o"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "# 데이터 표준화\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)  # 학습 데이터에 대해 표준화 학습 및 변환\n",
        "X_test = scaler.transform(X_test)  # 테스트 데이터는 학습된 스케일러로 변환"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6BVmY_poNjAP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "fc42cbc4-f0a7-46a1-8fd9-a73bdc331a2d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(torch.Size([455, 30]),\n",
              " torch.Size([114, 30]),\n",
              " torch.Size([455, 1]),\n",
              " torch.Size([114, 1]))"
            ]
          },
          "metadata": {},
          "execution_count": 137
        }
      ],
      "source": [
        "import torch\n",
        "# numpy 배열을 PyTorch 텐서로 변환\n",
        "X_train = torch.tensor(X_train, dtype=torch.float32)\n",
        "X_test = torch.tensor(X_test, dtype=torch.float32)\n",
        "y_train = torch.tensor(y_train, dtype=torch.float32).unsqueeze(1)\n",
        "y_test = torch.tensor(y_test, dtype=torch.float32).unsqueeze(1)\n",
        "X_train.shape, X_test.shape, y_train.shape, y_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UKvibSGeNjCm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e34389a-e09d-4b00-c3b9-249f113f5b0d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "=================================================================\n",
              "Layer (type:depth-idx)                   Param #\n",
              "=================================================================\n",
              "Sequential                               --\n",
              "├─Linear: 1-1                            31\n",
              "├─Sigmoid: 1-2                           --\n",
              "=================================================================\n",
              "Total params: 31\n",
              "Trainable params: 31\n",
              "Non-trainable params: 0\n",
              "================================================================="
            ]
          },
          "metadata": {},
          "execution_count": 139
        }
      ],
      "source": [
        "import torch.nn as nn\n",
        "from torchinfo import summary\n",
        "# nn.Sequential을 사용하여 로지스틱 회귀 모델 구현\n",
        "input_dim = 30  # 입력 차원 (특징의 개수)\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(input_dim, 1),  # 선형 계층\n",
        "    nn.Sigmoid()  # 시그모이드 함수\n",
        ")\n",
        "summary(model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "j-bLjJN6NjFL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d09e0431-6f44-4fab-df03-9dbe0d5beb47"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "=================================================================\n",
              "Layer (type:depth-idx)                   Param #\n",
              "=================================================================\n",
              "LogisticRegressionModel                  --\n",
              "├─Linear: 1-1                            31\n",
              "=================================================================\n",
              "Total params: 31\n",
              "Trainable params: 31\n",
              "Non-trainable params: 0\n",
              "================================================================="
            ]
          },
          "metadata": {},
          "execution_count": 140
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from torchinfo import summary\n",
        "# nn.Module을 상속받는 방식으로 로지스틱 회귀 모델 구현\n",
        "class LogisticRegressionModel(nn.Module):\n",
        "    def __init__(self, input_dim):\n",
        "        super(LogisticRegressionModel, self).__init__()\n",
        "        self.linear = nn.Linear(input_dim, 1)  # 선형 계층 정의\n",
        "\n",
        "    def forward(self, x):\n",
        "        return torch.sigmoid(self.linear(x))   # 선형 변환 후 시그모이드 함수 적용\n",
        "# 모델 생성\n",
        "input_dim = 30  # 입력 차원 (특징의 개수)\n",
        "model = LogisticRegressionModel(input_dim)\n",
        "summary(model)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "JBTnj4ExNqpA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e7e9f4c-14ce-4090-c75b-50f979bdba21"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 10/100, Loss: 0.4482\n",
            "Epoch 20/100, Loss: 0.2688\n",
            "Epoch 30/100, Loss: 0.1989\n",
            "Epoch 40/100, Loss: 0.1649\n",
            "Epoch 50/100, Loss: 0.1455\n",
            "Epoch 60/100, Loss: 0.1329\n",
            "Epoch 70/100, Loss: 0.1237\n",
            "Epoch 80/100, Loss: 0.1166\n",
            "Epoch 90/100, Loss: 0.1108\n",
            "Epoch 100/100, Loss: 0.1060\n"
          ]
        }
      ],
      "source": [
        "from torch import optim\n",
        "\n",
        "# 손실 함수 및 옵티마이저 정의\n",
        "criterion = nn.BCELoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=0.01)\n",
        "\n",
        "# 모델 학습\n",
        "num_epochs = 100\n",
        "model.train()\n",
        "for epoch in range(num_epochs):\n",
        "    y_pred = model(X_train)\n",
        "    loss = criterion(y_pred, y_train)\n",
        "    optimizer.zero_grad()\n",
        "    loss.backward()\n",
        "    optimizer.step()\n",
        "    if (epoch+1) % 10 == 0:\n",
        "        print(f'Epoch {epoch+1}/{num_epochs}, Loss: {loss.item():.4f}')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XLhPkKh5NjHR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4478a59f-96a1-4ceb-e513-0b787ebeeb29"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Test Accuracy: 98.25%\n"
          ]
        }
      ],
      "source": [
        "# 모델 평가\n",
        "model.eval()\n",
        "with torch.no_grad():\n",
        "    y_pred_test = model(X_test)\n",
        "    y_pred_label = (y_pred_test >= 0.5).float()\n",
        "accuracy = (y_pred_label.eq(y_test).sum() / y_test.shape[0]).item()\n",
        "print(f'Test Accuracy: {accuracy * 100:.2f}%')"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.14"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}